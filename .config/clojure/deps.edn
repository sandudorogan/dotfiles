;; The deps.edn file describes the information needed to build a classpath.
;;
;; When using the `clojure` or `clj` script, there are several deps.edn files
;; that are combined:
;; - install-level
;; - user level (this file)
;; - project level (current directory when invoked)
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

{:mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}
             "release" {:url "s3://180s-maven-repo/release"}}
 ;; Paths
 ;;   Directories in the current project to include in the classpath

 ;; :paths ["src"]

 ;; External dependencies

 :deps      {org.clojure/clojure {:mvn/version "1.10.3"}}

 ;; Aliases
 ;;   resolve-deps aliases (-R) affect dependency resolution, options:
 ;;     :extra-deps - specifies extra deps to add to :deps
 ;;     :override-deps - specifies a coordinate to use instead of that in :deps
 ;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
 ;;   make-classpath aliases (-C) affect the classpath generation, options:
 ;;     :extra-paths - vector of additional paths to add to the classpath
 ;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps

 :aliases    {;; project creation from templates:
              ;; https://github.com/seancorfield/clj-new
              ;; - create an application project:
              ;;   - clj -X:new :name myname/myapp
              ;;   - cd myapp
              ;;   - clj -M -m myname.myapp # run it!
              ;;   - clj -X:test:runner # run the tests!
              ;; - create a library project:
              ;;   - clj -X:new :template lib :name myname/my-cool-lib
              ;;   - cd my-cool-lib
              ;;   - clj -X:test:runner # run the tests!
              :new        {:extra-deps {com.github.seancorfield/clj-new {:mvn/version "1.2.381"}}
                           :exec-fn clj-new/create
                           :exec-args {:template "app"}}

              ;; project dependency version check
              ;; https://github.com/liquidz/antq
              ;; - check deps in project
              ;;   - clj -M:outdated
              ;;     --upgrade upgrade outdated versions interactively.
              ;;     --force for upgrading without confirmation.
              :outdated   {:extra-deps {com.github.liquidz/antq {:mvn/version "1.5.0"}}
                           :main-opts ["-m" "antq.core"]}

              :cider      {:extra-deps {org.clojure/clojure {:mvn/version "1.10.3"}
                                        cider/cider-nrepl {:mvn/version "0.28.2"}}
                           :main-opts ["-m" "nrepl.cmdline" "--middleware" "[cider.nrepl/cider-middleware]"]}

              :cider-cljs {:extra-deps {org.clojure/clojure {:mvn/version "1.10.3"}
                                        org.clojure/clojurescript {:mvn/version "1.11.4"}
                                        cider/cider-nrepl {:mvn/version "0.28.2"}
                                        cider/piggieback {:mvn/version "0.5.3"}}
                           :main-opts ["-m" "nrepl.cmdline" "--middleware"
                                       "[cider.nrepl/cider-middleware,cider.piggieback/wrap-cljs-repl]"]}

              :repl       {:extra-deps {nrepl/nrepl       {:mvn/version "0.9.0"}
                                        cider/cider-nrepl {:mvn/version "0.28.3"}}
                           :main-opts ["-m" "nrepl.cmdline" 
                                       "--middleware" "[cider.nrepl/cider-middleware]"]}

              }
 }
